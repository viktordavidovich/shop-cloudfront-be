service: product-service
frameworkVersion: '3'
configValidationMode: error
package:
  individually: true
provider:
  name: aws
  runtime: nodejs14.x
  region: us-east-1
  vpc:
    securityGroupIds:
      - sg-06377914f79d42217
      - sg-0ae3578e5378a40eb
    subnetIds:
      - subnet-0ae486e2c0717910c
      - subnet-062a05c1973218ba0
      - subnet-03432976967512f85
      - subnet-091eb1d47a48ef8fa
      - subnet-048eff49b4c0f584c
      - subnet-0c11087e1c7d84300
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - ec2:CreateNetworkInterface
            - ec2:DescribeNetworkInterfaces
            - ec2:DeleteNetworkInterface
          Resource: '*'
  environment:
    PG_HOST: ${file(./environment-variables.json):PG_HOST}
    PG_PORT: ${file(./environment-variables.json):PG_PORT}
    PG_DATABASE: ${file(./environment-variables.json):PG_DATABASE}
    PG_USERNAME: ${file(./environment-variables.json):PG_USERNAME}
    PG_PASSWORD: ${file(./environment-variables.json):PG_PASSWORD}
functions:
  getProductsList:
    handler:  src/functions/get-products-list.getProductsList
    events:
      - httpApi:
          path: /products
          method: get
          swaggerTags: ['Product Service API']
          produces: ['application/json']
          responseData:
            200:
              description: 'Returns list of products.'
              bodyType: 'Products'
            500:
              description: 'Internal server error.'
  getProductsById:
    handler: src/functions/get-products-by-id.getProductsById
    events:
      - httpApi:
          path: /products/{productId}
          method: get
          swaggerTags: ['Product Service API']
          produces: ['application/json']
          responseData:
            200:
              description: 'Returns product by given Id.'
              bodyType: 'Product'
            404:
              description: 'Product is not found by given Id.'
              bodyType: 'Error'
            500:
              description: 'Internal server error.'
  createProduct:
    handler: src/functions/create-product.createProduct
    events:
      - httpApi:
          path: /products
          method: post
          swaggerTags: [ 'Product Service API' ]
          consumes: [  'application/json']
          produces: [ 'application/json' ]
          bodyType: 'CreateProduct'
          responseData:
            201:
              description: 'Product created.'
              bodyType: 'Product'
            400:
              description: 'Product data is invalid.'
              bodyType: 'Error'
            500:
              description: 'Internal server error.'
plugins:
  - serverless-auto-swagger
  - serverless-webpack
custom:
  webpack:
    webpackConfig: 'webpack.config.js'
    includeModules: true
    packager: 'npm'
    excludeFiles: ['src/**/*.test.js', 'src/**/*.test.ts']
  autoswagger:
    title: 'Product Service API'
    apiType: 'httpApi'
    generateSwaggerOnDeploy: true
    typefiles: [ './src/@types/api-types.d.ts' ]
    schemes: [ 'https' ]